#include "stdafx.h"
#include "CrossShape.h"
#include <math.h>

/* Constructor -- Destructor */
CrossShape::CrossShape(sf::Color colour, float width, float thickness, sf::Vector2f position)
	: currentColour(colour)
	, shapeWidth(width)
	, shapeThickness(thickness)
	, currentPosition(position){

	setShape();
}

CrossShape::~CrossShape() {

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Initialisation */
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*!
	\brief this method is used to reset shape based on current settings (but will be used in initialisation also)
*/
void CrossShape::setShape() {

	backSlash.setFillColor(currentColour);
	forwardSlash.setFillColor(currentColour);

	float height = calculateRectLength();

	backSlash.setSize(sf::Vector2f(shapeThickness, height));
	forwardSlash.setSize(sf::Vector2f(shapeThickness, height));
	
	setAngles();
}

/*!
	\brief calculates the length of rectangle at 45 degrees to 'fully' occupy shape width
*/
int CrossShape::calculateRectLength() {

	return std::sqrt(std::pow(shapeWidth, 2) + std::pow(shapeWidth, 2));	//Pythagoras' Theorem - works out length of hypotenuse i.e. length (height of rectangle)
}


/*!
	\brief responsible for turning rectangles into cross
*/
void CrossShape::setAngles() {

	backSlash.setRotation(0);	//Probably unneccesary - in so that set position is from top right still
	forwardSlash.setRotation(0);

	sf::Vector2f backSize = backSlash.getSize();
	sf::Vector2f forwardSize = forwardSlash.getSize();

	backSlash.setOrigin(sf::Vector2f(backSize.x / 2, backSize.y / 2));
	forwardSlash.setOrigin(sf::Vector2f(forwardSize.x / 2, forwardSize.y / 2));

	//Rotate
	backSlash.setRotation(135); // \.
	forwardSlash.setRotation(45); // /.

	setPosition();

}

/*!
	\brief subtly different to setPosition(sf::Vector2f) - this actually alters position rather than change variable (this is private)
*/
void CrossShape::setPosition() {

	backSlash.setPosition(currentPosition);
	forwardSlash.setPosition(currentPosition);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Override */
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CrossShape::draw(sf::RenderTarget& target, sf::RenderStates states) const {

	target.draw(backSlash);
	target.draw(forwardSlash);
}


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Getters - Setters */
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void CrossShape::setPosition(sf::Vector2f position) {

	currentPosition = position;
	setPosition();
}

